<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Plugin gru</title>
    </properties>
    <body>
        <section name="Plugin gru">
            <!--
            <p>
                <img src="images/gru.png" />
            </p>
            -->
            <subsection name="Introduction">
                <p>
                This plugin enables to see all the demands of a customer in the same view and to manage them.
                </p>
            </subsection>
            <subsection name="Encryption of customers">
                <p>
                The plugin can use customers with encrypted ids. This mechanism permits to have a specific id for each service provider. Thus, the id is not shared.
                </p>
                <p>
                To use encryption, the site has to contain a class implementing the interface <code>fr.paris.lutece.plugins.grubusiness.service.encryption.ICustomerEncryptionService</code> from the library <code>gru-library-grubusiness</code>.
                For example, add the plugin <code>gru-plugin-grukeydiversification</code> in the <code>pom.xml</code> of the site. The encryption is then enabled.
                </p>
            </subsection>
            <subsection name="Authorization on customers">
                <p>
                To prevent the logged in user to access some customers, implements the interface <code>fr.paris.lutece.plugins.gru.service.customer.ICustomerAuthorizationFilter</code> and declare the implementation as a bean in the Spring context.
                </p>
            </subsection>
            <subsection name="Configuration">
                <p><strong>The Customer DAO</strong></p>
                <p>
                By default, the plugin uses a mock to search the customers. The search always returns a message saying that no customer is found.
                To use a correct search mechanism, the bean <code>gru.customerService</code> defined in the Spring context must use a concrete implementation of <code>fr.paris.lutece.plugins.grubusiness.business.customer.ICustomerDAO</code>
                from the library <code>gru-library-grubusiness</code>.
                </p>
                <p>
                The known implementations are the following:
                <ul>
                    <li>
                        <code>fr.paris.lutece.plugins.gruindexing.business.lucene.LuceneCustomerDAO</code> from the plugin <code>gru-plugin-gru-indexing</code>.
                        The customers are retrieved from a Lucene index.
                    </li>
                    <li>
                        <code>fr.paris.lutece.plugins.gruindexing.business.elasticsearch.ElasticSearchCustomerDAO</code> from the plugin <code>gru-plugin-gru-indexing</code>.
                        The customers are retrieved from a ElasticSearch server.
                    </li>
                </ul>
                </p>
                <p><strong>The Demand DAO</strong></p>
                <p>
                By default, the plugin uses a mock to retrieve the demands. The customers have no demand.
                To use a correct retrieval mechanism, the bean <code>gru.demandService</code> defined in the Spring context must use a concrete implementation of <code>fr.paris.lutece.plugins.grubusiness.business.demand.IDemandDAO</code>
                from the library <code>gru-library-grubusiness</code>.
                </p>
                <p>
                The known implementations are the following:
                <ul>
                    <li>
                        <code>fr.paris.lutece.plugins.grustoragedb.business.DemandDAO</code> from the plugin <code>gru-plugin-grustoragedb</code>.
                        The demands are retrieved from the database.
                    </li>
                </ul>
                </p>
                <p><strong>The Notification DAO</strong></p>
                <p>
                By default, the plugin uses a mock to retrieve the notifications. The customers have no notification.
                To use a correct retrieval mechanism, the bean <code>gru.demandService</code> defined in the Spring context must use a concrete implementation of <code>fr.paris.lutece.plugins.grubusiness.business.notification.INotificationDAO</code>
                from the library <code>gru-library-grubusiness</code>.
                </p>
                <p>
                The known implementations are the following:
                <ul>
                    <li>
                        <code>fr.paris.lutece.plugins.grustoragedb.business.NotificationDAO</code> from the plugin <code>gru-plugin-grustoragedb</code>.
                        The notifications are retrieved from the database.
                    </li>
                </ul>
                </p>
            </subsection>
            <subsection name="Usage">
                <p></p>
            </subsection>
        </section>
    </body>
</document>

